// Code generated by protoc-gen-go.
// source: api/services/icndb/icndb.proto
// DO NOT EDIT!

/*
Package icndb is a generated protocol buffer package.

It is generated from these files:
	api/services/icndb/icndb.proto

It has these top-level messages:
	Joke
	GetJokeRequest
	GetJokeResponse
*/
package icndb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Joke struct {
	Id         int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Joke       string   `protobuf:"bytes,2,opt,name=joke" json:"joke,omitempty"`
	Categories []string `protobuf:"bytes,3,rep,name=categories" json:"categories,omitempty"`
}

func (m *Joke) Reset()                    { *m = Joke{} }
func (m *Joke) String() string            { return proto.CompactTextString(m) }
func (*Joke) ProtoMessage()               {}
func (*Joke) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Joke) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Joke) GetJoke() string {
	if m != nil {
		return m.Joke
	}
	return ""
}

func (m *Joke) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

type GetJokeRequest struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
}

func (m *GetJokeRequest) Reset()                    { *m = GetJokeRequest{} }
func (m *GetJokeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJokeRequest) ProtoMessage()               {}
func (*GetJokeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetJokeRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GetJokeRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type GetJokeResponse struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value *Joke  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *GetJokeResponse) Reset()                    { *m = GetJokeResponse{} }
func (m *GetJokeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetJokeResponse) ProtoMessage()               {}
func (*GetJokeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetJokeResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetJokeResponse) GetValue() *Joke {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Joke)(nil), "Joke")
	proto.RegisterType((*GetJokeRequest)(nil), "GetJokeRequest")
	proto.RegisterType((*GetJokeResponse)(nil), "GetJokeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Icndb service

type IcndbClient interface {
	GetJoke(ctx context.Context, in *GetJokeRequest, opts ...grpc.CallOption) (*GetJokeResponse, error)
}

type icndbClient struct {
	cc *grpc.ClientConn
}

func NewIcndbClient(cc *grpc.ClientConn) IcndbClient {
	return &icndbClient{cc}
}

func (c *icndbClient) GetJoke(ctx context.Context, in *GetJokeRequest, opts ...grpc.CallOption) (*GetJokeResponse, error) {
	out := new(GetJokeResponse)
	err := grpc.Invoke(ctx, "/Icndb/GetJoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Icndb service

type IcndbServer interface {
	GetJoke(context.Context, *GetJokeRequest) (*GetJokeResponse, error)
}

func RegisterIcndbServer(s *grpc.Server, srv IcndbServer) {
	s.RegisterService(&_Icndb_serviceDesc, srv)
}

func _Icndb_GetJoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcndbServer).GetJoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icndb/GetJoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcndbServer).GetJoke(ctx, req.(*GetJokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Icndb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Icndb",
	HandlerType: (*IcndbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJoke",
			Handler:    _Icndb_GetJoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/icndb/icndb.proto",
}

func init() { proto.RegisterFile("api/services/icndb/icndb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x49, 0x5a, 0x03, 0x3e, 0xa4, 0x16, 0xdd, 0x14, 0x15, 0x54, 0x45, 0x9e, 0x32, 0xb9,
	0x52, 0x19, 0xd8, 0x59, 0x10, 0x19, 0x18, 0xfc, 0x0d, 0xdc, 0xe4, 0x40, 0xa6, 0xa5, 0x36, 0xb6,
	0x5b, 0x89, 0x6f, 0x8f, 0x62, 0x97, 0xf0, 0x67, 0xb1, 0xce, 0xcf, 0x7a, 0xbf, 0xf7, 0x7c, 0xb0,
	0xd4, 0xce, 0xac, 0x02, 0xf9, 0xa3, 0xe9, 0x28, 0xac, 0x4c, 0xb7, 0xef, 0x37, 0xf9, 0x94, 0xce,
	0xdb, 0x68, 0x45, 0x0b, 0xd3, 0xd6, 0x6e, 0x09, 0x67, 0x50, 0x9a, 0xbe, 0x2a, 0xea, 0xa2, 0x61,
	0xaa, 0x34, 0x3d, 0x22, 0x4c, 0xdf, 0xec, 0x96, 0xaa, 0xb2, 0x2e, 0x1a, 0xae, 0xd2, 0x8c, 0x4b,
	0x80, 0x4e, 0x47, 0x7a, 0xb5, 0xde, 0x50, 0xa8, 0x26, 0xf5, 0xa4, 0xe1, 0xea, 0x97, 0x22, 0x5a,
	0x98, 0x3d, 0x52, 0x1c, 0x70, 0x8a, 0x3e, 0x0e, 0x14, 0x22, 0xde, 0x02, 0x7f, 0x31, 0x3e, 0xc4,
	0x67, 0xfd, 0x4e, 0x09, 0xce, 0xd5, 0x8f, 0x80, 0x0b, 0xb8, 0xdc, 0xe9, 0xd3, 0x63, 0xce, 0x19,
	0xef, 0xe2, 0x01, 0xe6, 0x23, 0x2b, 0x38, 0xbb, 0x0f, 0x34, 0x54, 0x8a, 0x9f, 0xee, 0x9b, 0x93,
	0x66, 0xbc, 0x01, 0x76, 0xd4, 0xbb, 0x43, 0xf6, 0x5f, 0xad, 0x99, 0x4c, 0x8e, 0xac, 0xad, 0xef,
	0x81, 0x3d, 0x0d, 0x5f, 0x45, 0x09, 0x17, 0x27, 0x18, 0xce, 0xe5, 0xdf, 0x8a, 0x8b, 0x6b, 0xf9,
	0x2f, 0x47, 0x9c, 0x6d, 0xce, 0xd3, 0x6e, 0xee, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xd5,
	0x9b, 0x95, 0x3d, 0x01, 0x00, 0x00,
}
